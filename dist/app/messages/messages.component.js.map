{"version":3,"file":"messages.component.js","sourceRoot":"","sources":["messages.component.ts"],"names":[],"mappings":";;;;;;;;;;AAAA,qBAAuC,eAAe,CAAC,CAAA;AACvD,uBAAuC,WAAW,CAAC,CAAA;AACnD,iCAA8B,oBAAoB,CAAC,CAAA;AASnD;IAKE,2BACE,WAAwB,EAAU,WAAwB,EAClD,cAA+B;QADL,gBAAW,GAAX,WAAW,CAAa;QAClD,mBAAc,GAAd,cAAc,CAAiB;QALzC,gBAAW,GAAW,EAAE,CAAC;IAKoB,CAAC;IAE9C,oCAAQ,GAAR;QAAA,iBAUC;QATC,IAAI,CAAC,cAAc,CAAC,WAAW,EAAE,CAAC;QAClC,IAAI,CAAC,cAAc,CAAC,gBAAgB,CAAC,SAAS,CAAC,UAAA,QAAQ;YACrD,KAAI,CAAC,QAAQ,GAAG,EAAE,CAAC;YACnB,EAAE,CAAC,CAAC,QAAQ,CAAC,CAAC,CAAC;gBACb,GAAG,CAAC,CAAC,IAAI,CAAC,GAAG,QAAQ,CAAC,MAAM,GAAC,CAAC,EAAE,CAAC,IAAI,CAAC,EAAE,CAAC,EAAE,EAAE,CAAC;oBAC5C,KAAI,CAAC,QAAQ,CAAC,IAAI,CAAC,QAAQ,CAAC,CAAC,CAAC,CAAC,CAAC;gBAClC,CAAC;YACH,CAAC;QACH,CAAC,CAAC,CAAC;IACL,CAAC;IAED,uCAAW,GAAX,UAAY,WAAmB;QAC7B,IAAI,CAAC,cAAc,CAAC,WAAW,CAAC,WAAW,CAAC,CAAC;QAC7C,IAAI,CAAC,WAAW,GAAG,EAAE,CAAC;IACxB,CAAC;IAED,uCAAW,GAAX,UAAY,OAAiB;QAC3B,IAAI,WAAW,GAAG,IAAI,CAAC,WAAW,CAAC,WAAW,CAAC,OAAO,CAAC,GAAG,CAAC,CAAC;QAC5D,MAAM,CAAC,WAAW,GAAG,WAAW,GAAG,OAAO,CAAC,MAAM,CAAC;IACpD,CAAC;IA5BD;QAAC,YAAK,EAAE;;oDAAA;IAPV;QAAC,gBAAS,CAAC;YACT,QAAQ,EAAE,MAAM,CAAC,EAAE;YACnB,QAAQ,EAAE,cAAc;YACxB,WAAW,EAAE,yBAAyB;YACtC,SAAS,EAAE,CAAC,wBAAwB,CAAC;SACtC,CAAC;;yBAAA;IA+BF,wBAAC;AAAD,CAAC,AA9BD,IA8BC;AA9BY,yBAAiB,oBA8B7B,CAAA","sourcesContent":["import {Component, Input, OnInit} from '@angular/core';\nimport {AuthService, UserService} from '../shared';\nimport {MessagesService} from './messages.service';\nimport {IMessage} from './message';\n\n@Component({\n  moduleId: module.id,\n  selector: 'app-messages',\n  templateUrl: 'messages.component.html',\n  styleUrls: ['messages.component.css']\n})\nexport class MessagesComponent implements OnInit {\n  @Input() model;\n  messageText: string = '';\n  messages: IMessage[];\n\n  constructor(\n    authService: AuthService, private userService: UserService,\n    private messageService: MessagesService) { }\n\n  ngOnInit() {\n    this.messageService.getMessages();\n    this.messageService.limitedMessages$.subscribe(messages => {\n      this.messages = [];\n      if (messages) {\n        for (let i = messages.length-1; i >= 0; i--) {\n          this.messages.push(messages[i]);\n        }\n      } \n    });\n  }\n\n  sendMessage(messageText: string) {\n    this.messageService.sendMessage(messageText);\n    this.messageText = '';\n  }\n  \n  getShipName(message: IMessage) {\n    let displayName = this.userService.getShipName(message.uid); \n    return displayName ? displayName : message.author;\n  }\n}\n"]}