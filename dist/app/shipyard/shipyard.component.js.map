{"version":3,"file":"shipyard.component.js","sourceRoot":"","sources":["shipyard.component.ts"],"names":[],"mappings":";;;;;;;;;;AAAA,qBAAkC,eAAe,CAAC,CAAA;AAClD,uBAAiD,WAAW,CAAC,CAAA;AAC7D,uBAA0C,WAAW,CAAC,CAAA;AAWtD;IAKE,2BAAoB,aAA4B,EAAU,WAAwB;QALpF,iBA8BC;QAzBqB,kBAAa,GAAb,aAAa,CAAe;QAAU,gBAAW,GAAX,WAAW,CAAa;QAJlF,UAAK,GAAW,CAAC,CAAC;QAClB,aAAQ,GAAc,EAAE,CAAC;QACzB,iBAAY,GAAa,EAAE,CAAC;QAG1B,IAAI,CAAC,WAAW,CAAC,WAAW,CAAC,SAAS,CAAC,UAAA,IAAI;YACzC,EAAE,CAAC,CAAC,IAAI,CAAC,CAAC,CAAC;gBACT,EAAE,CAAC,CAAC,IAAI,CAAC,QAAQ,CAAC,CAAC,CAAC;oBAClB,KAAI,CAAC,YAAY,GAAG,MAAM,CAAC,IAAI,CAAC,IAAI,CAAC,QAAQ,CAAC,CAAC,GAAG,CAAC,UAAA,GAAG;wBACpD,MAAM,CAAC,IAAI,CAAC,QAAQ,CAAC,GAAG,CAAC,CAAC;oBAC5B,CAAC,CAAC,CAAC;gBACL,CAAC;gBACD,KAAI,CAAC,KAAK,GAAG,IAAI,CAAC,YAAY,CAAC;YACjC,CAAC;QACH,CAAC,CAAC,CAAC;QACH,aAAa,CAAC,QAAQ,CAAC,SAAS,CAAC,UAAA,QAAQ,IAAI,OAAA,KAAI,CAAC,QAAQ,GAAG,QAAQ,EAAxB,CAAwB,CAAC,CAAC;IACzE,CAAC;IAED,oCAAQ,GAAR;IACA,CAAC;IAED,sCAAU,GAAV,UAAW,OAAgB;QACzB,IAAI,CAAC,WAAW,CAAC,UAAU,CAAC,OAAO,CAAC,CAAC;IACvC,CAAC;IAED,yCAAa,GAAb,UAAc,UAAkB;QAC9B,MAAM,CAAC,IAAI,CAAC,YAAY,CAAC,OAAO,CAAC,UAAU,CAAC,GAAG,CAAC,CAAC,CAAC;IACpD,CAAC;IAnCH;QAAC,gBAAS,CAAC;YACT,QAAQ,EAAE,MAAM,CAAC,EAAE;YACnB,QAAQ,EAAE,cAAc;YACxB,KAAK,EAAE,CAAC,iBAAQ,CAAC;YACjB,WAAW,EAAE,yBAAyB;YACtC,SAAS,EAAE,CAAC,wBAAwB,CAAC;SACtC,CAAC;;yBAAA;IA+BF,wBAAC;AAAD,CAAC,AA9BD,IA8BC;AA9BY,yBAAiB,oBA8B7B,CAAA","sourcesContent":["import { Component, OnInit } from '@angular/core';\nimport {GlobalService, ISettings, Settings} from '../shared';\nimport {Upgrades, UserService, User} from '../shared';\nimport {Upgrade, UpgradeType} from '../ship';\n\n\n@Component({\n  moduleId: module.id,\n  selector: 'app-shipyard',\n  pipes: [Upgrades],\n  templateUrl: 'shipyard.component.html',\n  styleUrls: ['shipyard.component.css']\n})\nexport class ShipyardComponent implements OnInit {\n  money: number = 0;\n  upgrades: Upgrade[] = [];\n  userUpgrades: string[] = [];\n\n  constructor(private globalService: GlobalService, private userService: UserService) {\n    this.userService.currentUser.subscribe(user => {\n      if (user) {\n        if (user.upgrades) {\n          this.userUpgrades = Object.keys(user.upgrades).map(key => {\n            return user.upgrades[key];\n          });\n        }\n        this.money = user.currentScore;\n      }\n    });\n    globalService.upgrades.subscribe(upgrades => this.upgrades = upgrades);\n  }\n\n  ngOnInit() {\n  }\n  \n  buyUpgrade(upgrade: Upgrade) {\n    this.userService.buyUpgrade(upgrade);\n  }\n  \n  userPurchased(upgradeKey: string) {\n    return this.userUpgrades.indexOf(upgradeKey) > -1;\n  }\n\n}\n"]}