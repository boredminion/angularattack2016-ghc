{"version":3,"file":"auth-route.service.js","sourceRoot":"","sources":["auth-route.service.ts"],"names":[],"mappings":";AACA,uBAAqB,iBAAiB,CAAC,CAAA;AACvC,6BAA0B,gBAAgB,CAAC,CAAA;AAG3C,IAAI,WAAqB,CAAC;AAE1B;;;GAGG;AAEH;IAAA;IAwBA,CAAC;IAvBQ,6BAAY,GAAnB;QACE,IAAM,QAAQ,GAAa,gBAAgB,CAAC,QAAQ,EAAE,CAAC;QACvD,IAAM,IAAI,GAAgB,QAAQ,CAAC,GAAG,CAAC,0BAAW,CAAC,CAAC;QACpD,IAAM,MAAM,GAAW,QAAQ,CAAC,GAAG,CAAC,eAAM,CAAC,CAAC;QAC5C,MAAM,CAAC,EAAC,MAAA,IAAI,EAAE,QAAA,MAAM,EAAC,CAAC;IACxB,CAAC;IAEM,yBAAQ,GAAf,UAAgB,QAAmB;QACjC,EAAE,CAAC,CAAC,QAAQ,CAAC;YAAC,WAAW,GAAG,QAAQ,CAAC;QACrC,MAAM,CAAC,WAAW,CAAC;IACrB,CAAC;IAEM,4BAAW,GAAlB;QACE,IAAA,oCAAsD,EAA/C,cAAI,EAAE,kBAAM,CAAoC;QACvD,EAAE,CAAC,CAAC,CAAC,IAAI,CAAC,aAAa,CAAC;YAAC,MAAM,CAAC,QAAQ,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC;QAChD,MAAM,CAAC,IAAI,CAAC,aAAa,CAAC;IAC5B,CAAC;IAEM,8BAAa,GAApB;QACE,IAAA,oCAAsD,EAA/C,cAAI,EAAE,kBAAM,CAAoC;QACvD,EAAE,CAAC,CAAC,IAAI,CAAC,aAAa,CAAC;YAAC,MAAM,CAAC,QAAQ,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC;QAC/C,MAAM,CAAC,CAAC,IAAI,CAAC,aAAa,CAAC;IAC7B,CAAC;IACH,uBAAC;AAAD,CAAC,AAxBD,IAwBC;AAxBY,wBAAgB,mBAwB5B,CAAA","sourcesContent":["import {Injector} from '@angular/core';\nimport {Router} from '@angular/router';\nimport {AuthService} from './auth.service';\n\n\nlet appInjector: Injector;\n\n/**\n * This is a workaround until `CanActivate` supports DI\n * @see https://github.com/angular/angular/issues/4112\n */\n\nexport class AuthRouteService {\n  static dependencies(): {auth: AuthService, router: Router} {\n    const injector: Injector = AuthRouteService.injector();\n    const auth: AuthService = injector.get(AuthService);\n    const router: Router = injector.get(Router);\n    return {auth, router};\n  }\n\n  static injector(injector?: Injector): Injector {\n    if (injector) appInjector = injector;\n    return appInjector;\n  }\n\n  static requireAuth(): boolean {\n    const {auth, router} = AuthRouteService.dependencies();\n    if (!auth.authenticated) router.navigate(['/']);\n    return auth.authenticated;\n  }\n\n  static requireUnauth(): boolean {\n    const {auth, router} = AuthRouteService.dependencies();\n    if (auth.authenticated) router.navigate(['/']);\n    return !auth.authenticated;\n  }\n}\n"]}